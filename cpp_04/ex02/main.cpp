/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: chris <chris@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/03 19:48:02 by chris             #+#    #+#             */
/*   Updated: 2023/08/07 10:18:57 by chris            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "test.hpp"

void test1( void ) {

    const A_Animal* i = new Cat();
    const A_Animal* j = new Dog();

    i->makeSound();
    j->makeSound();

    // A_Animal ptr;

    delete i;
    delete j;
}

//******************************************************************************


void test2( void ) {

    int size = 5;
    const A_Animal* tab[size];
    initTab( tab, size );
    initStrings( tab, size );
    tab[1]->printArray();
    freeClassArray( tab, size );

}

//******************************************************************************

void test3( void ) {

    const Cat* A = new Cat();

    A->setPtr( "Hello 42" );

    std::cout << B_CYAN << "** A ** " << RESET;
    A->printArray();

//---------------------------------------------

    const Cat* B = new Cat(*A);

    std::cout << B_CYAN << "** B ** " << RESET;
    B->printArray();

    delete A;
    delete B;

}

//******************************************************************************

void test4( void ) {

    const Dog* A = new Dog();

    A->setPtr( "Hello 42" );

    std::cout << B_CYAN << "** A ** " << RESET;
    A->printArray();
    
//---------------------------------------------

    const Dog* B = new Dog(*A);

    std::cout << B_CYAN << "** B ** " << RESET;
    B->printArray();

    delete A;
    delete B;

}

//******************************************************************************


void test5( void ) {

    Dog A;

    A.setPtr( "Hello 42" );

    std::cout << B_CYAN << "** A ** " << RESET;
    A.printArray();
    
//---------------------------------------------

    Dog B;

    B = A;

    std::cout << B_CYAN << "B type = " << B.getType() << RESET << std::endl;
    std::cout << B_CYAN << "** B ** " << RESET;
    B.printArray();


}


void test6( void ) {

    Cat* A = new Cat();

    A->setPtr( "Hello 42" );

    std::cout << B_CYAN << "** A ** " << RESET;
    A->printArray();
    
//---------------------------------------------

    Cat* B = new Cat();

    *B = *A;

    std::cout << B_CYAN << "B type = " << B->getType() << RESET << std::endl;
    std::cout << B_CYAN << "** B ** " << RESET;
    B->printArray();

    delete A;
    delete B;


}

int main() {

//******************************************************************************
    // test1();
//******************************************************************************

//******************************************************************************
//    test2();
//******************************************************************************

//******************************************************************************
   test3();
//******************************************************************************

//******************************************************************************
//    test4();
//******************************************************************************

//******************************************************************************
//    test5();
//******************************************************************************

//******************************************************************************
//    test6();
//******************************************************************************

    // system("leaks a.out");
    return 0; 
}